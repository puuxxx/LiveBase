unit uTestuGraphicPrimitive;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Windows, uExceptionCodes, uExceptions, GdiPlus, Classes, SysUtils,
  uDrawingSupport, Graphics, uBase, uEventModel, uGraphicPrimitive;

type
  // Test methods for class TGraphicPrimitive

  TestTGraphicPrimitive = class(TTestCase)
  strict private
    FGraphicPrimitive: TGraphicPrimitive;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDraw;
    procedure TestRemoveAllChildren;
    procedure TestDelChild;
    procedure TestDelChild1;
    procedure TestParent;
    procedure TestIndexColor;
  end;

implementation

procedure TestTGraphicPrimitive.SetUp;
begin
  FGraphicPrimitive := TGraphicPrimitive.Create( nil );
end;

procedure TestTGraphicPrimitive.TearDown;
begin
  FGraphicPrimitive.Free;
  FGraphicPrimitive := nil;
end;

procedure TestTGraphicPrimitive.TestDraw;
var
  aGraphics: IGPGraphics;
begin
  // TODO: Setup method call parameters
  FGraphicPrimitive.DrawNormal(aGraphics);
  FGraphicPrimitive.DrawIndex(aGraphics);
  // TODO: Validate method results
end;

procedure TestTGraphicPrimitive.TestIndexColor;
var
  c : TColor;
  i, j : integer;
  Prm, RPrm : TGraphicPrimitive;
  arr : array[0..1000] of TColor;
begin
  RPrm := TGraphicPrimitive.Create(nil);
  Prm := RPrm;
  for I := low(arr) to length(arr) - 1 do begin
    Prm := TGraphicPrimitive.Create( Prm );
    arr[i] := Prm.IndexColor;
  end;

  for I := low(arr) to length( arr ) - 1  do begin
    c := arr[i];
    for j := i + 1 to length( arr ) - 1  do begin
      check( c <> arr[j] );
    end;
  end;

end;

procedure TestTGraphicPrimitive.TestParent;
var
  PrimP, PrimC  : TGraphicPrimitive;
begin
  PrimP := TGraphicPrimitive.Create(nil);
  PrimC  := TGraphicPrimitive.Create( PrimP );
  try
    Check( PrimC.Parent = PrimP );
    Check( PrimP.ChildCount = 1 );
    Check( PrimP.Child[0] = PrimC );
  finally
    PrimP.Free;
  end;
end;

procedure TestTGraphicPrimitive.TestRemoveAllChildren;
var
  i, j : integer;
begin
  randomize;
  for I := 0 to 100 do begin
    for j := 0 to random(100) do begin
      TGraphicPrimitive.Create( FGraphicPrimitive );
    end;
    FGraphicPrimitive.RemoveAllChildren;
    Check( FGraphicPrimitive.ChildCount = 0 );
  end;
end;

procedure TestTGraphicPrimitive.TestDelChild;
var
  i, m : Integer;
begin

  randomize;
  m := random(100) + 10;
  for i := 0 to  m-1 do begin
    TGraphicPrimitive.Create( FGraphicPrimitive );
  end;

  FGraphicPrimitive.DelChild( 0 );
  Check( FGraphicPrimitive.ChildCount = m -1 );
  dec( m );

  FGraphicPrimitive.DelChild( m - 1 );
  Check( FGraphicPrimitive.ChildCount = m -1 );
end;

procedure TestTGraphicPrimitive.TestDelChild1;
var
  aPrimitive: TGraphicPrimitive;
  m, i : integer;
begin

  randomize;
  m := random(100) + 10;
  for i := 0 to  m do begin
    TGraphicPrimitive.Create( FGraphicPrimitive );
  end;

  aPrimitive := FGraphicPrimitive.Child[0];
  FGraphicPrimitive.DelChild(aPrimitive);

  for I := 0 to FGraphicPrimitive.ChildCount-1 do begin
    Check( FGraphicPrimitive.Child[i] <> aPrimitive );
  end;
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestTGraphicPrimitive.Suite);
end.

