unit uTestuGraphicPrimitive;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uExceptionCodes, Winapi.Windows, uExceptions, Graphics, uBase,
  uEventModel, uGraphicPrimitive;

type
  // Test methods for class TPoints

  TestTPoints = class(TTestCase)
  strict private
    FPoints: TPoints;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
  end;
  // Test methods for class TGraphicPrimitive

  TestTGraphicPrimitive = class(TTestCase)
  strict private
    FGraphicPrimitive: TGraphicPrimitive;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDraw;
  end;

implementation

procedure TestTPoints.SetUp;
begin
  FPoints := TPoints.Create;
end;

procedure TestTPoints.TearDown;
begin
  FPoints.Free;
  FPoints := nil;
end;

procedure TestTPoints.TestAdd;
var
  aY: Integer;
  aX: Integer;
  i : integer;
  P : TPoint;
  ok : boolean;
begin
  aX := 100;
  aY := 100;

  Check( FPoints.Count = 0, 'Add point' );
  FPoints.Add(aX, aY);
  Check( FPoints.Count = 1, 'Add point 2' );
  for I := Low(Word) to High(Word) do FPoints.Add( ax, aY );
  Check( FPoints.Count = High(Word) - Low(Word) + 2 , 'Add point 3');

  P := FPoints.Point[0];
  CheckEquals( 100, P.X, 'Point X');
  CheckEquals( 100, P.Y, 'Point Y');

  try
    ok := false;
    P := FPoints.Point[ -1 ];
  except
    ok := true;
  end;
  Check( ok, 'point -1' );


  try
    ok := false;
    P := FPoints.Point[ High( Word ) + High( Word )  ];
  except
    ok := true;
  end;
  Check( ok, 'point mulion' );




end;

procedure TestTPoints.TestClear;
begin
  FPoints.Clear;
  // TODO: Validate method results
end;

procedure TestTGraphicPrimitive.SetUp;
begin
  FGraphicPrimitive := TGraphicPrimitive.Create( nil );
end;

procedure TestTGraphicPrimitive.TearDown;
begin
  FGraphicPrimitive.Free;
  FGraphicPrimitive := nil;
end;

procedure TestTGraphicPrimitive.TestDraw;
var
  aBitmap: Winapi.Windows.tagBITMAP;
begin
  // TODO: Setup method call parameters
  FGraphicPrimitive.Draw(aBitmap);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPoints.Suite);
  RegisterTest(TestTGraphicPrimitive.Suite);
end.

