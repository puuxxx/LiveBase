unit uTestDrawingSupport;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uExceptionCodes, Winapi.Windows, uExceptions, Graphics, uBase,
  uEventModel, uDrawingSupport, GdiPlus, System.UITypes;

type
  // Test methods for class TPoints

  TestTPoints = class(TTestCase)
  strict private
    FPoints: TPoints;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
  end;

  TestTDrawingBox = class(TTestCase )
  strict private
    FDrawingBox: TDrawingBox;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBrushes;
    procedure TestPen;
    procedure TestSetColor;
  end;

  TestDrawingAreaStatic = class( TTestCase )
  published
    procedure TestStatic;
  end;

implementation

procedure TestTPoints.SetUp;
begin
  FPoints := TPoints.Create;
end;

procedure TestTPoints.TearDown;
begin
  FPoints.Free;
  FPoints := nil;
end;

procedure TestTPoints.TestAdd;
var
  aY: Integer;
  aX: Integer;
  i : integer;
  P : TPoint;
begin
  aX := 100;
  aY := 100;

  Check( FPoints.Count = 0, 'Add point XY' );
  FPoints.Add(aX, aY);
  Check( FPoints.Count = 1, 'Add point XY 2' );
  for I := Low(Word) to High(Word) do FPoints.Add( ax, aY );
  Check( FPoints.Count = High(Word) - Low(Word) + 2 , 'Add point XY 3');

  P := FPoints.Point[0];
  CheckEquals( 100, P.X, 'Point X');
  CheckEquals( 100, P.Y, 'Point Y');

  FPoints.AddPoint( P );
  Check( FPoints.Count = High(Word) - Low(Word) + 3, 'Add point Obj' );

  P := FPoints.Point[1];
  CheckEquals( 100, P.X );
  CheckEquals( 100, P.Y );
end;

procedure TestTPoints.TestClear;
var
  i : integer;
begin
  for I := Low(Word) to High(Word) do FPoints.Add( 1, 1 );
  Check( FPoints.Count > 100, 'Add before clear' );
  FPoints.Clear;
  Check( FPoints.Count = 0, 'Points clear' );
end;

{ TestTDrawingBox }

procedure TestTDrawingBox.SetUp;
begin
  FDrawingBox := TDrawingBox.Create;
end;

procedure TestTDrawingBox.TearDown;
begin
  FDrawingBox.Free;
  FDrawingBox := nil;
end;

procedure TestTDrawingBox.TestBrushes;
begin
  CheckNotNull( FDrawingBox.SolidBrush );
  Check( FDrawingBox.SolidBrush is TGPSolidBrush );
end;


procedure TestTDrawingBox.TestPen;
begin
  CheckNotNull( FDrawingBox.Pen );
  Check( FDrawingBox.Pen is TGPPen );
end;

procedure TestTDrawingBox.TestSetColor;
var
  c : TColor;
begin
 c := clMenu;

 FDrawingBox.SetColor( c );

 CheckEquals( c, FDrawingBox.BackgroundColor );
 CheckEquals( c, FDrawingBox.BorderColor );
end;

{ TestDrawingAreaStatic }

procedure TestDrawingAreaStatic.TestStatic;
begin
 Check( TGPColor.Red = GPColor( clRed ).Value );
end;

initialization
  RegisterTest(TestTPoints.Suite);
  RegisterTest(TestTDrawingBox.Suite);
  RegisterTest(TestDrawingAreaStatic.Suite);

end.

